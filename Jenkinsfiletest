pipeline {
    agent any

    options {
        timeout(time: 1, unit: 'HOURS') // Adjust the timeout as needed
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh 'docker build -t palrag .'
                }
            }
        }

        stage('Deploy to Remote AWS EC2') {
            steps {
                withCredentials([
                    sshUserPrivateKey(credentialsId: 'your-ssh-credentials-id', keyFileVariable: 'SSH_KEY', passphraseVariable: 'SSH_PASSPHRASE'),
                    string(credentialsId: 'your-aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'your-aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    script {
                        // Save Docker image to a tar file
                        sh 'docker save palrag -o palrag.tar'

                        // Copy Docker image to AWS EC2 instance
                        sh 'scp -i ${SSH_KEY} palrag.tar ec2-user@34.201.161.231:~/palrag.tar'

                        // SSH into AWS EC2 instance and perform Docker operations
                        sh """
                            ssh -i ${SSH_KEY} ec2-user@34.201.161.231 << 'EOF'
                                sudo docker stop palrag || true
                                sudo docker rm palrag || true
                                sudo docker load -i ~/palrag.tar
                                sudo docker run -d -p 8081:8081 --name palrag palrag
                            EOF
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}
